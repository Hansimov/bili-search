// This file defines grammar for the DSL used by blbl.top search engine
// author: @Hansimov

start: expr | expr_with_error
    ?expr: atom_expr | pa_expr | or_expr | co_expr | and_expr
        or_expr: expr (or expr)+
        co_expr: expr+
        and_expr: expr (and expr)+
        pa_expr: lp expr? rp
        atom_expr: bvid_expr | date_expr | user_expr | uid_expr | stat_expr | dura_expr | region_expr | word_expr | text_expr
    ?expr_with_error: (expr | expr_error)+
        expr_error: text_catch

// ---------- basic operators ---------- //
WT: " "
EQ: WT* "="
EQS: (WT* EQ)+
MI: "-"
PL: "+"
NQ: "!"
LT: "<"
GT: ">"
AT: "@"
TD: "~"

AND: "&"
OR: "|"
ANDS: (WT* AND WT*)+
ORS: (WT* OR WT*)+
and: ANDS
or: ORS

NEQ: (NQ | MI) EQ
PEQ: PL EQ
LEQ: LT EQ
GEQ: GT EQ
NEQS: (NQ | MI) EQS
PEQS: PL EQS
LEQS: LT EQS
GEQS: GT EQS

eq: EQ
lt: LT
gt: GT
mi: MI
pl: PL
nq: NQ
neq: NEQ
peq: PEQ
leq: LEQ
geq: GEQ

eqs: EQS
neqs: NEQS
peqs: PEQS
leqs: LEQS
geqs: GEQS

eq_list: EQS
neq_list: NEQS

op_rel: eqs | lt | gt | neqs | leqs | geqs
op_list: eq_list | neq_list
op_eqs: eqs | neqs

COMMA: ","
COLON: ":"
LP: "("
RP: ")"
LK: "["
RK: "]"
QS: "?"

COLONS: (WT* COLON WT*)+
COMMAS: (WT* COMMA WT*)+
colon: COLONS
comma: COMMAS
lb: lp | lk
    lp: LP
    lk: LK
rb: rp | rk
    rp: RP
    rk: RK
qs: QS
fz: /~\d*/

lb_comma: lb comma?
comma_rb: comma? rb

// ---------- date exprs ---------- //
date_expr: colon? date_key date_op_val
    date_key: /(?i:(date|rq|dt|d))/
    date_op_val: date_op_val_single | date_op_val_list
        date_op_val_single: date_op_single date_val_single
            date_op_single: op_rel
            date_val_single: date_num_unit | date_iso | date_recent
                date_num_unit: date_num date_unit
                    date_num: digits
                    date_unit: date_unit_year | date_unit_month | date_unit_week | date_unit_day | date_unit_hour
                date_iso: yyyymmddhh | yyyymmdd | yyyymm | yyyy | mmddhh | mmdd
                    yyyymmddhh: yyyy sep_ymd mm sep_ymd dd sep_ymd hh
                    yyyymmdd: yyyy sep_ymd mm sep_ymd dd
                    yyyymm: yyyy sep_ymd mm
                    mmddhh: mm sep_ymd dd sep_dh hh
                    mmdd: mm sep_ymd dd
                date_recent: date_this | date_last | date_past
                    date_this: "this" sep_en date_unit | "t" date_unit
                    date_last: "last" sep_en date_unit | "l" date_unit
                    date_past: "past" sep_en date_unit | "p" date_unit
        date_op_val_list: date_op_list date_val_list
            date_op_list: op_list
            date_val_list: lb_comma date_val_left? comma? date_val_right? comma_rb
                date_val_left: date_val_single
                date_val_right: date_val_single

digits: /[0-9]+/
alpha_digits: /[a-zA-Z0-9_]+/
yyyy: /\d{4}/
mm: /\d{1,2}/
dd: /\d{1,2}/
hh: /\d{1,2}/

sep_ymd: /[\-\/\.]+/
sep_hms: /[\_\.]+/
sep_dh: /[\s\.]+/
sep_en: /[\_\.\s\-]+/

date_unit_year: /(?i:(year|yr|y))/
date_unit_month: /(?i:(month|mon|m))/
date_unit_week: /(?i:(week|wk|w))/
date_unit_day: /(?i:(day|d))/
date_unit_hour: /(?i:(hour|hr|h))/


// ---------- user exprs ---------- //
user_expr: colon? user_key_op user_val
    user_key_op: user_key user_op | user_at
        user_key: /(?i:(user|up|u))/
        user_op: eq | neq
        user_at: at_neq | at_eq
    user_val: user_val_single | user_val_list
        user_val_single: text_quoted | text_strict
        user_val_list: lb_comma (user_val_single)? (comma user_val_single)* comma_rb

at_eq: AT
at_neq: AT NQ


// ---------- uid exprs ---------- //
uid_expr: colon? uid_key uid_op uid_val
    uid_key: /(?i:(uid|mid|ud))/
    uid_op: op_eqs
    uid_val: uid_val_single | uid_val_list
        uid_val_single: digits
        uid_val_list: lb_comma (uid_val_single)? (comma uid_val_single)* comma_rb


// ---------- avid/bvid exprs ---------- //
bvid_expr: colon? bvid_key bvid_op bvid_val
    bvid_key: /(?i:(avid|av|bvid|bv))/
    bvid_op: op_list
    bvid_val: bvid_val_single | bvid_val_list
        bvid_val_single: bvid_str
        bvid_val_list: lb_comma (bvid_val_single)? (comma bvid_val_single)* comma_rb

bvid_str: /[a-zA-Z0-9]+/

// ---------- stat exprs ---------- //
stat_expr: colon? stat_key stat_op_val
    stat_key: view_key | like_key | coin_key | favorite_key | reply_key | danmaku_key | share_key
        view_key: /(?i:(view|bf|vw|v))/
        like_key: /(?i:(like|dz|lk|l))/
        coin_key: /(?i:(coin|tb|cn|c))/
        favorite_key: /(?i:(favorite|fav|sc|fv))/
        reply_key: /(?i:(reply|pl|rp))/
        danmaku_key: /(?i:(danmaku|dm))/
        share_key: /(?i:(share|fx|sh))/
    stat_op_val: stat_op_val_single | stat_op_val_list
        stat_op_val_single: op_rel stat_val_single
            stat_val_single: stat_num stat_unit?
                stat_num: digits
                stat_unit: /[kKwWmM]+/
        stat_op_val_list: op_rel stat_val_list
            stat_val_list: lb_comma stat_val_left? comma? stat_val_right? comma_rb
                stat_val_left: stat_val_single
                stat_val_right: stat_val_single

// ---------- dura exprs ---------- //
dura_expr: colon? dura_key dura_op dura_val
    dura_key: /(?i:(duration|dura|dr|time|t))/
    dura_op: op_rel
    dura_val: dura_val_single | dura_val_list
        dura_val_single: dura_string | dura_digits
            dura_string: /(\d+[dDhHmMsS])+/
            dura_digits: digits
        dura_val_list: lb_comma dura_val_left? comma? dura_val_right? comma_rb
            dura_val_left: dura_val_single
            dura_val_right: dura_val_single

// ---------- region exprs ---------- //
region_expr: colon? region_key region_op region_val
    region_key: /(?i:(region|rid|fq|rg))/
    region_op: op_list
    region_val: region_val_single | region_val_list
        region_val_single: digits | text_strict
        region_val_list: lb_comma (region_val_single)? (comma region_val_single)* comma_rb


// ---------- word exprs ---------- //
word_expr: colon? word_key_op_val
    word_key_op_val: word_pp? word_val_single word_sp? | word_key_op word_val_list
        word_key_op: word_key word_op
            word_key: /(?i:(keyword|kw|k))/
            word_op: eq | neq
        word_pp: mi | pl | nq
        word_sp: qs | fz
        word_val_single: text_expr
        word_val_list: word_val_list_lr | word_val_list_no_lr
            word_val_list_lr: lb_comma (word_val_single)? (comma word_val_single)* comma_rb
            word_val_list_no_lr: comma? word_val_single (comma word_val_single)*

text_expr.-1: text_quoted | text_strict | text_plain

text_quoted: /“[^“”]+”/ | /《[^《》]+》/ | /【[^【】]+】/ | /（[^（）]+）/ | /"[^"]+"/
text_strict: /(?=[^+\-])[^\s\n"“”\|\&\?\(\)\[\]:!,<>]+/
text_plain:  /(?=[^+\-])[^\s\n"“”\|\&\?\(\)\[\]:!,<>]+/
text_catch:   /[\s\n"“”\|\&\?\(\)\[\]:!,<>]+/

%import common.WS
%ignore WS